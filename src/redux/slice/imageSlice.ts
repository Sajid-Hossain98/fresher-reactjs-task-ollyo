import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { v4 as uuidv4 } from "uuid";

//the data structure of an image object
interface ImageData {
  id: string; // unique id generated by UUID
  url: string; //url for the image
  selected: boolean; //to track if the image is selected
}

//the structure of image state in redux store
interface ImageStateProps {
  images: ImageData[];
}

//initial state for the image slice in the redux store
const initialState: ImageStateProps = {
  images: [], //initializing images as an empty array
};

const imageSlice = createSlice({
  name: "image",
  initialState,
  reducers: {
    //adds a new image to the store when dispatched
    addImage: (state, action: PayloadAction<string>) => {
      const newImage: ImageData = {
        id: uuidv4(), // Generates UUID for the image
        url: action.payload, //the cloudinary imageUrl will be passed to it
        selected: false, //setting initial 'selected' property to 'false'
      };
      state.images.push(newImage); //pushing newImage to the array
    },

    //toggles the selection state of a clicked image
    toggleImageSelection: (state, action) => {
      const { id } = action.payload;
      const image = state.images.find((image) => image.id === id); //Checking which of the images is the clicked image in the images array!
      if (image) {
        image.selected = !image.selected; //Setting the 'selected' property to the opposite of what was set to before.
      }
    },

    //deletes the selected images from the state
    deleteSelected: (state) => {
      const selectedIds = state.images
        .filter((filteredImage) => filteredImage.selected) //filter the images that are selected
        .map((selectedImage) => selectedImage.id); //mapping over the filtered images and getting the ids

      state.images = state.images.filter(
        (image) => !selectedIds.includes(image.id) //now the images array will be only those images that were not selected and deleted
      );
    },

    //to update the image array with new reordered image array
    moveImage: (state, action) => {
      state.images = action.payload;
    },
  },
});

export const { addImage, toggleImageSelection, deleteSelected, moveImage } =
  imageSlice.actions;

export const selectImages = (state: RootState) => state.images;

export default imageSlice.reducer;
